// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type OptionsLegacyParser } from '@hey-api/client-axios';
import type { CreateProviderApiV1ProvidersPostData, CreateProviderApiV1ProvidersPostError, CreateProviderApiV1ProvidersPostResponse, ListProvidersApiV1ProvidersGetData, ListProvidersApiV1ProvidersGetError, ListProvidersApiV1ProvidersGetResponse, GetProviderApiV1ProvidersProviderIdGetData, GetProviderApiV1ProvidersProviderIdGetError, GetProviderApiV1ProvidersProviderIdGetResponse, UpdateProviderApiV1ProvidersProviderIdPatchData, UpdateProviderApiV1ProvidersProviderIdPatchError, UpdateProviderApiV1ProvidersProviderIdPatchResponse, DeleteProviderApiV1ProvidersProviderIdDeleteData, DeleteProviderApiV1ProvidersProviderIdDeleteError, DeleteProviderApiV1ProvidersProviderIdDeleteResponse, CreateModelApiV1ModelsPostData, CreateModelApiV1ModelsPostError, CreateModelApiV1ModelsPostResponse, ListModelsApiV1ModelsGetData, ListModelsApiV1ModelsGetError, ListModelsApiV1ModelsGetResponse, GetModelApiV1ModelsLlmModelIdGetData, GetModelApiV1ModelsLlmModelIdGetError, GetModelApiV1ModelsLlmModelIdGetResponse, UpdateModelApiV1ModelsLlmModelIdPatchData, UpdateModelApiV1ModelsLlmModelIdPatchError, UpdateModelApiV1ModelsLlmModelIdPatchResponse, DeleteModelApiV1ModelsLlmModelIdDeleteData, DeleteModelApiV1ModelsLlmModelIdDeleteError, DeleteModelApiV1ModelsLlmModelIdDeleteResponse, StreamCompletionApiV1ChatCompleteSessionIdMessageIdStreamGetData, StreamCompletionApiV1ChatCompleteSessionIdMessageIdStreamGetError, StreamCompletionApiV1ChatCompleteSessionIdMessageIdStreamGetResponse, CompleteApiV1ChatCompleteSessionIdPostData, CompleteApiV1ChatCompleteSessionIdPostError, CompleteApiV1ChatCompleteSessionIdPostResponse, CreateChatSessionApiV1SessionsPostData, CreateChatSessionApiV1SessionsPostError, CreateChatSessionApiV1SessionsPostResponse, ListChatSessionsApiV1SessionsGetData, ListChatSessionsApiV1SessionsGetError, ListChatSessionsApiV1SessionsGetResponse, GetChatSessionApiV1SessionsSessionIdGetData, GetChatSessionApiV1SessionsSessionIdGetError, GetChatSessionApiV1SessionsSessionIdGetResponse, UpdateChatSessionApiV1SessionsSessionIdPatchData, UpdateChatSessionApiV1SessionsSessionIdPatchError, UpdateChatSessionApiV1SessionsSessionIdPatchResponse, DeleteChatSessionApiV1SessionsSessionIdDeleteData, DeleteChatSessionApiV1SessionsSessionIdDeleteError, DeleteChatSessionApiV1SessionsSessionIdDeleteResponse, CreateMessageApiV1MessagesSessionIdPostData, CreateMessageApiV1MessagesSessionIdPostError, CreateMessageApiV1MessagesSessionIdPostResponse, ListSessionMessagesApiV1MessagesSessionIdGetData, ListSessionMessagesApiV1MessagesSessionIdGetError, ListSessionMessagesApiV1MessagesSessionIdGetResponse, GetMessageApiV1MessagesSessionIdMessageIdGetData, GetMessageApiV1MessagesSessionIdMessageIdGetError, GetMessageApiV1MessagesSessionIdMessageIdGetResponse, UpdateMessageApiV1MessagesSessionIdMessageIdPatchData, UpdateMessageApiV1MessagesSessionIdMessageIdPatchError, UpdateMessageApiV1MessagesSessionIdMessageIdPatchResponse, DeleteMessageApiV1MessagesSessionIdMessageIdDeleteData, DeleteMessageApiV1MessagesSessionIdMessageIdDeleteError, DeleteMessageApiV1MessagesSessionIdMessageIdDeleteResponse } from './types.gen';

export const client = createClient(createConfig());

/**
 * Create Provider
 * ## Create a New LLM Provider
 *
 * Creates a new language model provider configuration. Each provider must have a unique name.
 *
 * ### Parameters
 * - **provider_in**: Provider creation parameters containing:
 * - **name**: Name of the provider (must be unique)
 * - **config**: Provider-specific configuration parameters
 * - **is_active**: Whether the provider is active (default: True)
 *
 * ### Returns
 * The created provider configuration
 */
export const createProviderApiV1ProvidersPost = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CreateProviderApiV1ProvidersPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateProviderApiV1ProvidersPostResponse, CreateProviderApiV1ProvidersPostError, ThrowOnError>({
        ...options,
        url: '/api/v1/providers/'
    });
};

/**
 * List Providers
 * ## List All LLM Providers
 *
 * Retrieves a paginated list of all language model providers.
 *
 * ### Parameters
 * - **offset** (optional): Number of records to skip (default: 0)
 * - **limit** (optional): Maximum number of records to return (default: 10)
 *
 * ### Returns
 * List of provider configurations with their details
 */
export const listProvidersApiV1ProvidersGet = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<ListProvidersApiV1ProvidersGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListProvidersApiV1ProvidersGetResponse, ListProvidersApiV1ProvidersGetError, ThrowOnError>({
        ...options,
        url: '/api/v1/providers/'
    });
};

/**
 * Get Provider
 * ## Get a Specific LLM Provider
 *
 * Retrieves detailed information about a specific language model provider by its ID.
 *
 * ### Parameters
 * - **provider_id**: UUID of the provider to retrieve
 *
 * ### Returns
 * Detailed provider configuration information
 */
export const getProviderApiV1ProvidersProviderIdGet = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetProviderApiV1ProvidersProviderIdGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetProviderApiV1ProvidersProviderIdGetResponse, GetProviderApiV1ProvidersProviderIdGetError, ThrowOnError>({
        ...options,
        url: '/api/v1/providers/{provider_id}/'
    });
};

/**
 * Update Provider
 * ## Update a Specific LLM Provider
 *
 * Updates the configuration of an existing language model provider.
 *
 * ### Parameters
 * - **provider_id**: UUID of the provider to update
 * - **provider_in**: Provider update parameters containing:
 * - **name** (optional): New name for the provider
 * - **config** (optional): Updated provider configuration
 * - **is_active** (optional): Updated active status
 *
 * ### Returns
 * Updated provider configuration
 */
export const updateProviderApiV1ProvidersProviderIdPatch = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpdateProviderApiV1ProvidersProviderIdPatchData, ThrowOnError>) => {
    return (options?.client ?? client).patch<UpdateProviderApiV1ProvidersProviderIdPatchResponse, UpdateProviderApiV1ProvidersProviderIdPatchError, ThrowOnError>({
        ...options,
        url: '/api/v1/providers/{provider_id}/'
    });
};

/**
 * Delete Provider
 * ## Delete a Specific LLM Provider
 *
 * Permanently removes a language model provider configuration from the system.
 *
 * ### Parameters
 * - **provider_id**: UUID of the provider to delete
 *
 * ### Returns
 * No content on successful deletion
 */
export const deleteProviderApiV1ProvidersProviderIdDelete = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteProviderApiV1ProvidersProviderIdDeleteData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteProviderApiV1ProvidersProviderIdDeleteResponse, DeleteProviderApiV1ProvidersProviderIdDeleteError, ThrowOnError>({
        ...options,
        url: '/api/v1/providers/{provider_id}/'
    });
};

/**
 * Create Model
 * ## Create a New LLM Model Configuration
 *
 * Creates a new language model configuration for a specific provider. Each model must have a unique name within its provider.
 *
 * ### Parameters
 * - **model_in**: Model creation parameters containing:
 * - **name**: Name of the model (must be unique per provider)
 * - **provider_id**: UUID of the provider this model belongs to
 * - **config**: Model-specific configuration parameters
 * - **is_active**: Whether the model is active (default: True)
 */
export const createModelApiV1ModelsPost = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CreateModelApiV1ModelsPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateModelApiV1ModelsPostResponse, CreateModelApiV1ModelsPostError, ThrowOnError>({
        ...options,
        url: '/api/v1/models/'
    });
};

/**
 * List Models
 * ## List All LLM Models
 *
 * Retrieves a paginated list of all language models, with optional filtering by provider.
 *
 * ### Parameters
 * - **provider_id** (optional): Filter models by provider UUID
 * - **offset** (optional): Number of records to skip (default: 0)
 * - **limit** (optional): Maximum number of records to return (default: 10)
 *
 * ### Returns
 * List of model configurations with their details
 */
export const listModelsApiV1ModelsGet = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<ListModelsApiV1ModelsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListModelsApiV1ModelsGetResponse, ListModelsApiV1ModelsGetError, ThrowOnError>({
        ...options,
        url: '/api/v1/models/'
    });
};

/**
 * Get Model
 * ## Get a Specific LLM Model
 *
 * Retrieves detailed information about a specific language model by its ID.
 *
 * ### Parameters
 * - **llm_model_id**: UUID of the model to retrieve
 *
 * ### Returns
 * Detailed model configuration information
 */
export const getModelApiV1ModelsLlmModelIdGet = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetModelApiV1ModelsLlmModelIdGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetModelApiV1ModelsLlmModelIdGetResponse, GetModelApiV1ModelsLlmModelIdGetError, ThrowOnError>({
        ...options,
        url: '/api/v1/models/{llm_model_id}/'
    });
};

/**
 * Update Model
 * ## Update a Specific LLM Model Configuration
 *
 * Updates the configuration of an existing language model.
 *
 * ### Parameters
 * - **llm_model_id**: UUID of the model to update
 * - **model_in**: Model update parameters containing:
 * - **name** (optional): New name for the model
 * - **config** (optional): Updated model configuration
 * - **is_active** (optional): Updated active status
 *
 * ### Returns
 * Updated model configuration
 */
export const updateModelApiV1ModelsLlmModelIdPatch = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpdateModelApiV1ModelsLlmModelIdPatchData, ThrowOnError>) => {
    return (options?.client ?? client).patch<UpdateModelApiV1ModelsLlmModelIdPatchResponse, UpdateModelApiV1ModelsLlmModelIdPatchError, ThrowOnError>({
        ...options,
        url: '/api/v1/models/{llm_model_id}/'
    });
};

/**
 * Delete Model
 * ## Delete a Specific LLM Model Configuration
 *
 * Permanently removes a language model configuration from the system.
 *
 * ### Parameters
 * - **llm_model_id**: UUID of the model to delete
 *
 * ### Returns
 * No content on successful deletion
 */
export const deleteModelApiV1ModelsLlmModelIdDelete = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteModelApiV1ModelsLlmModelIdDeleteData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteModelApiV1ModelsLlmModelIdDeleteResponse, DeleteModelApiV1ModelsLlmModelIdDeleteError, ThrowOnError>({
        ...options,
        url: '/api/v1/models/{llm_model_id}/'
    });
};

/**
 * Stream Completion
 * ## Stream Chat Completion
 *
 * Streams the completion for a previously created message using Server-Sent Events (SSE).
 *
 * ### Parameters
 * - **session_id**: UUID of the chat session
 * - **message_id**: UUID of the message to generate completion for
 * - **params**: Generation parameters:
 * - **max_tokens**: Maximum tokens to generate (default: 1024)
 * - **temperature**: Temperature for generation (default: 0.7)
 *
 * ### Returns
 * Server-sent events stream of the generated completion
 *
 * ### Raises
 * - **404**: Session, message or model not found
 * - **429**: Rate limit exceeded
 * - **503**: Provider service unavailable
 */
export const streamCompletionApiV1ChatCompleteSessionIdMessageIdStreamGet = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<StreamCompletionApiV1ChatCompleteSessionIdMessageIdStreamGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<StreamCompletionApiV1ChatCompleteSessionIdMessageIdStreamGetResponse, StreamCompletionApiV1ChatCompleteSessionIdMessageIdStreamGetError, ThrowOnError>({
        ...options,
        url: '/api/v1/chat/complete/{session_id}/{message_id}/stream'
    });
};

/**
 * Complete
 * ## Generate Chat Completion
 *
 * Generates a completion for the given prompt in a single request.
 *
 * ### Parameters
 * - **session_id**: UUID of the chat session
 * - **request**: Completion request:
 * - **provider_id**: UUID of the LLM provider to use
 * - **llm_model_id**: UUID of the model to use
 * - **prompt**: Text prompt to generate completion for
 * - **parent_id**: Optional parent message ID for threading
 * - **max_tokens**: Maximum tokens to generate (default: 1024)
 * - **temperature**: Temperature for generation (default: 0.7)
 *
 * ### Returns
 * The generated completion with usage statistics
 *
 * ### Raises
 * - **404**: Session, provider or model not found
 * - **429**: Rate limit exceeded
 * - **503**: Provider service unavailable
 */
export const completeApiV1ChatCompleteSessionIdPost = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CompleteApiV1ChatCompleteSessionIdPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<CompleteApiV1ChatCompleteSessionIdPostResponse, CompleteApiV1ChatCompleteSessionIdPostError, ThrowOnError>({
        ...options,
        url: '/api/v1/chat/complete/{session_id}'
    });
};

/**
 * Create Chat Session
 * ## Create Chat Session
 * Creates a new chat session with the specified provider and model.
 *
 * ### Parameters
 * - **title**: Session title (1-255 chars)
 * - **system_context**: Optional system instructions
 * - **provider_id**: UUID of the LLM provider
 * - **llm_model_id**: UUID of the model to use
 * - **extra_data**: Optional additional data
 *
 * ### Returns
 * The created chat session
 *
 * ### Raises
 * - **404**: Provider or model not found
 * - **400**: Invalid provider/model combination
 */
export const createChatSessionApiV1SessionsPost = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CreateChatSessionApiV1SessionsPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateChatSessionApiV1SessionsPostResponse, CreateChatSessionApiV1SessionsPostError, ThrowOnError>({
        ...options,
        url: '/api/v1/sessions/'
    });
};

/**
 * List Chat Sessions
 * ## List Chat Sessions
 * Retrieves a list of all chat sessions.
 *
 * ### Parameters
 * - **offset**: Number of sessions to skip (default: 0)
 * - **limit**: Maximum number of sessions to return (default: 50)
 *
 * ### Returns
 * List of chat sessions
 *
 * ### Raises
 * - **400**: Invalid request parameters
 */
export const listChatSessionsApiV1SessionsGet = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<ListChatSessionsApiV1SessionsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListChatSessionsApiV1SessionsGetResponse, ListChatSessionsApiV1SessionsGetError, ThrowOnError>({
        ...options,
        url: '/api/v1/sessions/'
    });
};

/**
 * Get Chat Session
 * ## Get Chat Session
 * Retrieves details of a specific chat session.
 *
 * ### Parameters
 * - **session_id**: UUID of the chat session
 *
 * ### Returns
 * The chat session details
 *
 * ### Raises
 * - **404**: Session not found
 */
export const getChatSessionApiV1SessionsSessionIdGet = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetChatSessionApiV1SessionsSessionIdGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetChatSessionApiV1SessionsSessionIdGetResponse, GetChatSessionApiV1SessionsSessionIdGetError, ThrowOnError>({
        ...options,
        url: '/api/v1/sessions/{session_id}/'
    });
};

/**
 * Update Chat Session
 * ## Update Chat Session
 * Updates the details of a specific chat session.
 *
 * ### Parameters
 * - **session_id**: UUID of the chat session
 * - **title**: Optional new title
 * - **system_context**: Optional new system instructions
 * - **extra_data**: Optional additional data
 *
 * ### Returns
 * The updated chat session
 *
 * ### Raises
 * - **404**: Session not found
 * - **400**: Invalid request parameters
 */
export const updateChatSessionApiV1SessionsSessionIdPatch = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpdateChatSessionApiV1SessionsSessionIdPatchData, ThrowOnError>) => {
    return (options?.client ?? client).patch<UpdateChatSessionApiV1SessionsSessionIdPatchResponse, UpdateChatSessionApiV1SessionsSessionIdPatchError, ThrowOnError>({
        ...options,
        url: '/api/v1/sessions/{session_id}/'
    });
};

/**
 * Delete Chat Session
 * ## Delete Chat Session
 * Permanently deletes a specific chat session.
 *
 * ### Parameters
 * - **session_id**: UUID of the chat session
 *
 * ### Raises
 * - **404**: Session not found
 */
export const deleteChatSessionApiV1SessionsSessionIdDelete = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteChatSessionApiV1SessionsSessionIdDeleteData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteChatSessionApiV1SessionsSessionIdDeleteResponse, DeleteChatSessionApiV1SessionsSessionIdDeleteError, ThrowOnError>({
        ...options,
        url: '/api/v1/sessions/{session_id}/'
    });
};

/**
 * Create Message
 * ## Create a New Chat Message
 * Creates a new message in the specified chat session.
 *
 * ### Parameters
 * - **session_id**: UUID of the chat session
 * - **content**: Message content
 * - **role**: Message role (user/assistant/system)
 * - **parent_id**: Optional parent message ID for threading
 * - **extra_data**: Optional additional data
 *
 * ### Returns
 * The created message
 *
 * ### Raises
 * - **404**: Session not found
 * - **404**: Parent message not found (if parent_id provided)
 * - **400**: Invalid role for message
 */
export const createMessageApiV1MessagesSessionIdPost = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CreateMessageApiV1MessagesSessionIdPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateMessageApiV1MessagesSessionIdPostResponse, CreateMessageApiV1MessagesSessionIdPostError, ThrowOnError>({
        ...options,
        url: '/api/v1/messages/{session_id}/'
    });
};

/**
 * List Session Messages
 * ## List Session Messages
 * Retrieves messages from a specific chat session.
 *
 * ### Parameters
 * - **session_id**: UUID of the chat session
 * - **offset**: Number of messages to skip (default: 0)
 * - **limit**: Maximum number of messages to return (default: 10)
 *
 * ### Returns
 * List of messages in chronological order
 *
 * ### Raises
 * - **404**: Session not found
 */
export const listSessionMessagesApiV1MessagesSessionIdGet = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ListSessionMessagesApiV1MessagesSessionIdGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListSessionMessagesApiV1MessagesSessionIdGetResponse, ListSessionMessagesApiV1MessagesSessionIdGetError, ThrowOnError>({
        ...options,
        url: '/api/v1/messages/{session_id}/'
    });
};

/**
 * Get Message
 * ## Get Message Details
 * Retrieves details of a specific message.
 *
 * ### Parameters
 * - **session_id**: UUID of the chat session
 * - **message_id**: UUID of the message
 *
 * ### Returns
 * The message details
 *
 * ### Raises
 * - **404**: Session or message not found
 * - **400**: Message doesn't belong to session
 */
export const getMessageApiV1MessagesSessionIdMessageIdGet = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetMessageApiV1MessagesSessionIdMessageIdGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetMessageApiV1MessagesSessionIdMessageIdGetResponse, GetMessageApiV1MessagesSessionIdMessageIdGetError, ThrowOnError>({
        ...options,
        url: '/api/v1/messages/{session_id}/{message_id}/'
    });
};

/**
 * Update Message
 * ## Update Message
 * Updates the details of a specific message.
 *
 * ### Parameters
 * - **session_id**: UUID of the chat session
 * - **message_id**: UUID of the message
 * - **content**: Optional new content
 * - **status**: Optional new status
 * - **extra_data**: Optional data updates
 *
 * ### Returns
 * The updated message
 *
 * ### Raises
 * - **404**: Session or message not found
 * - **400**: Message doesn't belong to session
 */
export const updateMessageApiV1MessagesSessionIdMessageIdPatch = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpdateMessageApiV1MessagesSessionIdMessageIdPatchData, ThrowOnError>) => {
    return (options?.client ?? client).patch<UpdateMessageApiV1MessagesSessionIdMessageIdPatchResponse, UpdateMessageApiV1MessagesSessionIdMessageIdPatchError, ThrowOnError>({
        ...options,
        url: '/api/v1/messages/{session_id}/{message_id}/'
    });
};

/**
 * Delete Message
 * ## Delete Message
 * Permanently deletes a specific message.
 *
 * ### Parameters
 * - **session_id**: UUID of the chat session
 * - **message_id**: UUID of the message
 *
 * ### Raises
 * - **404**: Session or message not found
 * - **400**: Message doesn't belong to session
 */
export const deleteMessageApiV1MessagesSessionIdMessageIdDelete = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteMessageApiV1MessagesSessionIdMessageIdDeleteData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteMessageApiV1MessagesSessionIdMessageIdDeleteResponse, DeleteMessageApiV1MessagesSessionIdMessageIdDeleteError, ThrowOnError>({
        ...options,
        url: '/api/v1/messages/{session_id}/{message_id}/'
    });
};