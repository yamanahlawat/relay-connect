/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/v1/ai/complete/{session_id}/{message_id}/stream': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Stream Completion
     * @description ## Stream Chat Completion
     *
     *     Streams the completion for a previously created message using Server-Sent Events (SSE).
     *
     *     ### Parameters
     *     - **session_id**: UUID of the chat session
     *     - **message_id**: UUID of the message to generate completion for
     *     - **params**: Generation parameters (temperature, max_tokens)
     *
     *     ### Returns
     *     Server-sent events stream of the generated completion
     *
     *     ### Raises
     *     - **404**: Session, message or model not found
     *     - **429**: Rate limit exceeded
     *     - **503**: AI service unavailable
     */
    get: operations['stream_completion_api_v1_ai_complete__session_id___message_id__stream_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/ai/complete/{session_id}/stop': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Stop Completion
     * @description ## Stop Chat Completion Stream
     *
     *     Stops an ongoing streaming completion for the specified session.
     *     Uses Redis-based cancellation to stop the stream across distributed instances.
     *
     *     ### Parameters
     *     - **session_id**: UUID of the chat session to stop streaming
     *
     *     ### Returns
     *     No content on successful stop
     *
     *     ### Raises
     *     - **404**: Session not found
     */
    post: operations['stop_completion_api_v1_ai_complete__session_id__stop_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/sessions/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List Chat Sessions
     * @description ## List Chat Sessions
     *     Retrieves a list of all chat sessions.
     *
     *     ### Parameters
     *     - **offset**: Number of sessions to skip (default: 0)
     *     - **limit**: Maximum number of sessions to return (default: 50)
     *
     *     ### Returns
     *     List of chat sessions
     *
     *     ### Raises
     *     - **400**: Invalid request parameters
     */
    get: operations['list_chat_sessions_api_v1_sessions__get'];
    put?: never;
    /**
     * Create Chat Session
     * @description ## Create Chat Session
     *     Creates a new chat session with the specified provider and model.
     *
     *     ### Parameters
     *     - **title**: Session title (1-255 chars)
     *     - **system_context**: Optional system instructions
     *     - **provider_id**: UUID of the LLM provider
     *     - **llm_model_id**: UUID of the model to use
     *     - **extra_data**: Optional additional data
     *
     *     ### Returns
     *     The created chat session
     *
     *     ### Raises
     *     - **404**: Session not found
     */
    post: operations['create_chat_session_api_v1_sessions__post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/sessions/{session_id}/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Chat Session
     * @description ## Get Chat Session
     *     Retrieves details of a specific chat session.
     *
     *     ### Parameters
     *     - **session_id**: UUID of the chat session
     *
     *     ### Returns
     *     The chat session details
     *
     *     ### Raises
     *     - **404**: Session not found
     */
    get: operations['get_chat_session_api_v1_sessions__session_id___get'];
    put?: never;
    post?: never;
    /**
     * Delete Chat Session
     * @description ## Delete Chat Session
     *     Permanently deletes a specific chat session.
     *
     *     ### Parameters
     *     - **session_id**: UUID of the chat session
     *
     *     ### Raises
     *     - **404**: Session not found
     */
    delete: operations['delete_chat_session_api_v1_sessions__session_id___delete'];
    options?: never;
    head?: never;
    /**
     * Update Chat Session
     * @description ## Update Chat Session
     *     Updates the details of a specific chat session.
     *
     *     ### Parameters
     *     - **session_id**: UUID of the chat session
     *     - **title**: Optional new title
     *     - **system_context**: Optional new system instructions
     *     - **extra_data**: Optional additional data
     *
     *     ### Returns
     *     The updated chat session
     *
     *     ### Raises
     *     - **404**: Session not found
     *     - **400**: Invalid request parameters
     */
    patch: operations['update_chat_session_api_v1_sessions__session_id___patch'];
    trace?: never;
  };
  '/api/v1/messages/{session_id}/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List Session Messages
     * @description ## List Session Messages
     *     Retrieves messages from a specific chat session.
     *
     *     ### Parameters
     *     - **session_id**: UUID of the chat session
     *     - **offset**: Number of messages to skip (default: 0)
     *     - **limit**: Maximum number of messages to return (default: 10)
     *
     *     ### Returns
     *     List of messages in chronological order
     *
     *     ### Raises
     *     - **404**: Session not found
     */
    get: operations['list_session_messages_api_v1_messages__session_id___get'];
    put?: never;
    /**
     * Create Message
     * @description Create a new message in the specified chat session with support for file attachments.
     *
     *     ### Parameters
     *     - **session_id**: UUID of the chat session
     *     - **Form Data**:
     *         - **content**: Message content (required)
     *         - **role**: Message role (user/assistant/system)
     *         - **status**: Message status
     *         - **parent_id**: Optional parent message ID for threading
     *         - **usage**: JSON string of usage statistics
     *         - **attachments**: List of file attachments
     *         - **extra_data**: JSON string of additional metadata
     *
     *     ### Returns
     *     The created message with complete details
     *
     *     ### Raises
     *     - **404**: Session not found
     *     - **404**: Parent message not found (if parent_id provided)
     *     - **400**: Invalid role for message
     *     - **400**: Invalid form data format
     *     - **413**: File too large
     */
    post: operations['create_message_api_v1_messages__session_id___post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/messages/{session_id}/{message_id}/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Message
     * @description ## Get Message Details
     *     Retrieves details of a specific message.
     *
     *     ### Parameters
     *     - **session_id**: UUID of the chat session
     *     - **message_id**: UUID of the message
     *
     *     ### Returns
     *     The message details
     *
     *     ### Raises
     *     - **404**: Session or message not found
     *     - **400**: Message doesn't belong to session
     */
    get: operations['get_message_api_v1_messages__session_id___message_id___get'];
    put?: never;
    post?: never;
    /**
     * Delete Message
     * @description ## Delete Message
     *     Permanently deletes a specific message.
     *
     *     ### Parameters
     *     - **session_id**: UUID of the chat session
     *     - **message_id**: UUID of the message
     *
     *     ### Raises
     *     - **404**: Session or message not found
     *     - **400**: Message doesn't belong to session
     */
    delete: operations['delete_message_api_v1_messages__session_id___message_id___delete'];
    options?: never;
    head?: never;
    /**
     * Update Message
     * @description ## Update Message
     *     Updates the details of a specific message.
     *
     *     ### Parameters
     *     - **session_id**: UUID of the chat session
     *     - **message_id**: UUID of the message
     *     - **content**: Optional new content
     *     - **status**: Optional new status
     *     - **extra_data**: Optional data updates
     *
     *     ### Returns
     *     The updated message
     *
     *     ### Raises
     *     - **404**: Session or message not found
     *     - **400**: Message doesn't belong to session
     */
    patch: operations['update_message_api_v1_messages__session_id___message_id___patch'];
    trace?: never;
  };
  '/api/v1/messages/bulk/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * Bulk Delete Messages
     * @description ## Bulk Delete Messages
     *     Permanently deletes multiple messages by their IDs.
     *     ### Parameters
     *     - **message_ids**: List of UUIDs for the messages to delete.
     */
    delete: operations['bulk_delete_messages_api_v1_messages_bulk__delete'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/attachments/{folder}/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Upload Attachment
     * @description Upload a single file attachment.
     *     Args:
     *         folder: Storage folder path (e.g. 'session_id/message_id')
     *         file: File to upload
     *     Returns:
     *         Uploaded attachment details
     *     Raises:
     *         HTTPException: If file type not supported or upload fails
     */
    post: operations['upload_attachment_api_v1_attachments__folder___post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/attachments/{folder}/{filename}/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Serve Attachment
     * @description Serves an attachment file.
     *     The folder should represent the storage folder (e.g. 'session_id/message_id'),
     *     and filename is the stored file name (including the UUID prefix).
     */
    get: operations['serve_attachment_api_v1_attachments__folder___filename___get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/providers/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List Providers
     * @description ## List All LLM Providers
     *
     *     Retrieves a paginated list of all language model providers.
     *
     *     ### Parameters
     *     - **is_active** (optional): Filter by active status
     *     - **provider_name** (optional): Filter providers by name
     *     - **offset** (optional): Number of records to skip (default: 0)
     *     - **limit** (optional): Maximum number of records to return (default: 10)
     *
     *     ### Returns
     *     List of provider configurations with their details
     */
    get: operations['list_providers_api_v1_providers__get'];
    put?: never;
    /**
     * Create Provider
     * @description ## Create a New LLM Provider
     *
     *     Creates a new language model provider configuration. Each provider must have a unique name.
     *
     *     ### Parameters
     *     - **provider_in**: Provider creation parameters containing:
     *     - **name**: Name of the provider (must be unique)
     *     - **type**: Type of provider (openai, anthropic, etc.)
     *     - **api_key**: API key for the provider (optional)
     *     - **base_url**: Custom base URL (optional)
     *     - **is_active**: Whether the provider is active (default: True)
     *
     *     ### Returns
     *     The created provider configuration
     */
    post: operations['create_provider_api_v1_providers__post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/providers/{provider_id}/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Provider
     * @description ## Get a Specific LLM Provider
     *
     *     Retrieves detailed information about a specific language model provider by its ID.
     *
     *     ### Parameters
     *     - **provider_id**: UUID of the provider to retrieve
     *
     *     ### Returns
     *     Detailed provider configuration information
     */
    get: operations['get_provider_api_v1_providers__provider_id___get'];
    put?: never;
    post?: never;
    /**
     * Delete Provider
     * @description ## Delete a Specific LLM Provider
     *
     *     Permanently removes a language model provider configuration from the system.
     *
     *     ### Parameters
     *     - **provider_id**: UUID of the provider to delete
     *
     *     ### Returns
     *     No content on successful deletion
     */
    delete: operations['delete_provider_api_v1_providers__provider_id___delete'];
    options?: never;
    head?: never;
    /**
     * Update Provider
     * @description ## Update a Specific LLM Provider
     *
     *     Updates the configuration of an existing language model provider.
     *
     *     ### Parameters
     *     - **provider_id**: UUID of the provider to update
     *     - **provider_in**: Provider update parameters containing:
     *     - **name** (optional): New name for the provider
     *     - **type** (optional): Updated provider type
     *     - **api_key** (optional): Updated API key
     *     - **base_url** (optional): Updated base URL
     *     - **is_active** (optional): Updated active status
     *
     *     ### Returns
     *     Updated provider configuration
     */
    patch: operations['update_provider_api_v1_providers__provider_id___patch'];
    trace?: never;
  };
  '/api/v1/models/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List Models
     * @description ## List All LLM Models
     *
     *     Retrieves a paginated list of all language models, with optional filtering by provider.
     *
     *     ### Parameters
     *     - **provider_id** (optional): Filter models by provider UUID
     *     - **is_active** (optional): Filter by active status
     *     - **model_name** (optional): Filter models by name
     *     - **offset** (optional): Number of records to skip (default: 0)
     *     - **limit** (optional): Maximum number of records to return (default: 10)
     *
     *     ### Returns
     *     List of model configurations with their details
     */
    get: operations['list_models_api_v1_models__get'];
    put?: never;
    /**
     * Create Model
     * @description ## Create a New LLM Model Configuration
     *
     *     Creates a new language model configuration for a specific provider. Each model must have a unique name within its provider.
     *
     *     ### Parameters
     *     - **model_in**: Model creation parameters containing:
     *     - **name**: Name of the model (must be unique per provider)
     *     - **provider_id**: UUID of the provider this model belongs to
     *     - **default_temperature**: Default temperature setting
     *     - **default_max_tokens**: Default max tokens setting
     *     - **default_top_p**: Default top_p setting
     *     - **is_active**: Whether the model is active (default: True)
     */
    post: operations['create_model_api_v1_models__post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/models/all/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List Models By Provider
     * @description ## List All Models Grouped by Provider
     *
     *     Retrieves all models across all providers in a single request, grouped by provider name.
     *
     *     ### Returns
     *     Dictionary with provider names as keys and lists of their models as values
     */
    get: operations['list_models_by_provider_api_v1_models_all__get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/models/{llm_model_id}/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Model
     * @description ## Get a Specific LLM Model
     *
     *     Retrieves detailed information about a specific language model by its ID.
     *
     *     ### Parameters
     *     - **llm_model_id**: UUID of the model to retrieve
     *
     *     ### Returns
     *     Detailed model configuration information
     */
    get: operations['get_model_api_v1_models__llm_model_id___get'];
    put?: never;
    post?: never;
    /**
     * Delete Model
     * @description ## Delete a Specific LLM Model Configuration
     *
     *     Permanently removes a language model configuration from the system.
     *
     *     ### Parameters
     *     - **llm_model_id**: UUID of the model to delete
     *
     *     ### Returns
     *     No content on successful deletion
     */
    delete: operations['delete_model_api_v1_models__llm_model_id___delete'];
    options?: never;
    head?: never;
    /**
     * Update Model
     * @description ## Update a Specific LLM Model Configuration
     *
     *     Updates the configuration of an existing language model.
     *
     *     ### Parameters
     *     - **llm_model_id**: UUID of the model to update
     *     - **model_in**: Model update parameters containing:
     *     - **name** (optional): New name for the model
     *     - **default_temperature** (optional): Updated default temperature
     *     - **default_max_tokens** (optional): Updated default max tokens
     *     - **default_top_p** (optional): Updated default top_p
     *     - **is_active** (optional): Updated active status
     *
     *     ### Returns
     *     Updated model configuration
     */
    patch: operations['update_model_api_v1_models__llm_model_id___patch'];
    trace?: never;
  };
  '/api/v1/mcp/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List Mcp Servers
     * @description ## List All MCP Servers
     *     List all configured MCP servers with their configurations and statuses.
     *
     *     ### Parameters
     *     - **offset**: Number of items to skip (default: 0)
     *     - **limit**: Maximum number of items to return (default: 10)
     *
     *     ### Returns
     *     List of all MCP server configurations with status and available tools
     */
    get: operations['list_mcp_servers_api_v1_mcp__get'];
    put?: never;
    /**
     * Create Mcp Server
     * @description ## Create MCP Server
     *     Create a new MCP server configuration.
     *
     *     This endpoint allows creating new MCP server configurations directly from the frontend.
     *
     *     ### Parameters
     *     - **server**: MCP server configuration
     *
     *     ### Returns
     *     The created MCP server configuration with status
     */
    post: operations['create_mcp_server_api_v1_mcp__post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/mcp/{server_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * Update Mcp Server
     * @description ## Update MCP Server
     *     Update an existing MCP server configuration.
     *
     *     This endpoint allows updating an existing MCP server configuration directly from the frontend.
     *
     *     ### Parameters
     *     - **server_id**: UUID of the MCP server
     *     - **server**: MCP server configuration update
     *
     *     ### Returns
     *     The updated MCP server configuration with status
     *
     *     ### Raises
     *     - **404**: Server not found
     */
    put: operations['update_mcp_server_api_v1_mcp__server_id__put'];
    post?: never;
    /**
     * Delete Mcp Server
     * @description ## Delete MCP Server
     *     Delete an existing MCP server configuration.
     *
     *     This endpoint allows deleting an existing MCP server configuration directly from the frontend.
     *     If the server is running, it will be shut down before deletion.
     *
     *     ### Parameters
     *     - **server_id**: UUID of the MCP server to delete
     *
     *     ### Returns
     *     No content on success
     *
     *     ### Raises
     *     - **404**: Server not found
     */
    delete: operations['delete_mcp_server_api_v1_mcp__server_id__delete'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /**
     * AttachmentRead
     * @description Schema for reading an Attachment.
     *     Includes all base fields plus the id and timestamps.
     */
    AttachmentRead: {
      /** File Name */
      file_name: string;
      /** File Size */
      file_size: number;
      /** Mime Type */
      mime_type: string;
      type: components['schemas']['AttachmentType'];
      /** Storage Path */
      storage_path: string;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
      /**
       * Absolute Url
       * @description Constructs the absolute URL for this attachment.
       *     If using local storage, it builds the URL from settings.BASE_URL, settings.API_URL, and the stored path.
       */
      readonly absolute_url: string;
    };
    /**
     * AttachmentType
     * @description Enum for attachment types
     * @enum {string}
     */
    AttachmentType: 'image' | 'video' | 'document' | 'audio';
    /** Body_upload_attachment_api_v1_attachments__folder___post */
    Body_upload_attachment_api_v1_attachments__folder___post: {
      /**
       * File
       * Format: binary
       */
      file: string;
    };
    /**
     * ChatUsage
     * @description Schema for token usage and costs
     */
    ChatUsage: {
      /** Input Tokens */
      input_tokens: number;
      /** Output Tokens */
      output_tokens: number;
      /** Input Cost */
      input_cost: number;
      /** Output Cost */
      output_cost: number;
      /**
       * Total Cost
       * @description Total cost (input + output)
       */
      total_cost: number;
    };
    /**
     * ErrorDetail
     * @description Details for provider-specific errors
     */
    ErrorDetail: {
      /** Code */
      code: string;
      /** Message */
      message: string;
      /** Provider */
      provider: string;
      /** Details */
      details?: unknown | null;
    };
    /**
     * ErrorResponseModel
     * @description Standard error response model for OpenAPI documentation
     */
    ErrorResponseModel: {
      /** Detail */
      detail: string | components['schemas']['ErrorDetail'];
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components['schemas']['ValidationError'][];
    };
    /**
     * MCPServerCreate
     * @description Schema for creating a new MCP server
     */
    MCPServerCreate: {
      /**
       * Command
       * @description Command to execute or URL for HTTP servers
       */
      command: string;
      /**
       * @description Type of MCP server
       * @default stdio
       */
      server_type: components['schemas']['ServerType'];
      /**
       * Config
       * @description Server configuration (validated by pydantic-ai when creating server instances)
       */
      config?: {
        [key: string]: unknown;
      };
      /**
       * Enabled
       * @description Whether server is enabled
       * @default true
       */
      enabled: boolean;
      /**
       * Env
       * @description Environment variables
       */
      env?: {
        [key: string]: string;
      } | null;
      /**
       * Name
       * @description Unique name for the server
       */
      name: string;
    };
    /**
     * MCPServerResponse
     * @description Schema for MCP server response
     */
    MCPServerResponse: {
      /**
       * Command
       * @description Command to execute or URL for HTTP servers
       */
      command: string;
      /**
       * @description Type of MCP server
       * @default stdio
       */
      server_type: components['schemas']['ServerType'];
      /**
       * Config
       * @description Server configuration (validated by pydantic-ai when creating server instances)
       */
      config?: {
        [key: string]: unknown;
      };
      /**
       * Enabled
       * @description Whether server is enabled
       * @default true
       */
      enabled: boolean;
      /**
       * Env
       * @description Environment variables
       */
      env?: {
        [key: string]: string;
      } | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Name */
      name: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
      /**
       * @description Current operational status of the server
       * @default unknown
       */
      status: components['schemas']['ServerStatus'];
      /**
       * Available Tools
       * @description Available tools from this server
       */
      available_tools?: components['schemas']['MCPTool'][];
    };
    /**
     * MCPServerUpdate
     * @description Schema for updating an existing MCP server
     */
    MCPServerUpdate: {
      /**
       * Command
       * @description Command to execute or URL for HTTP servers
       */
      command?: string | null;
      /** @description Type of MCP server */
      server_type?: components['schemas']['ServerType'] | null;
      /**
       * Config
       * @description Server configuration
       */
      config?: {
        [key: string]: unknown;
      } | null;
      /**
       * Enabled
       * @description Whether server is enabled
       */
      enabled?: boolean | null;
      /**
       * Env
       * @description Environment variables
       */
      env?: {
        [key: string]: string;
      } | null;
    };
    /**
     * MCPTool
     * @description Represents an MCP tool with its metadata.
     */
    MCPTool: {
      /** Name */
      name: string;
      /** Description */
      description?: string | null;
      /**
       * Server Name
       * @description Name of the MCP server providing this tool
       */
      server_name: string;
      /** Input Schema */
      input_schema: {
        [key: string]: unknown;
      };
    };
    /**
     * MessageCreate
     * @description Schema for creating a new message
     */
    MessageCreate: {
      /** Content */
      content?: string | null;
      /** @default user */
      role: components['schemas']['MessageRole'];
      /** @default pending */
      status: components['schemas']['MessageStatus'];
      /** Parent Id */
      parent_id?: string | null;
      usage?: components['schemas']['MessageUsage'];
      /** Extra Data */
      extra_data?: {
        [key: string]: unknown;
      };
      /**
       * Attachment Ids
       * @description List of attachment IDs already uploaded
       */
      attachment_ids?: string[];
    };
    /**
     * MessageRead
     * @description Schema for reading a message
     */
    MessageRead: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Session Id
       * Format: uuid
       */
      session_id: string;
      role: components['schemas']['MessageRole'];
      /** Content */
      content?: string | null;
      status: components['schemas']['MessageStatus'];
      /** Parent Id */
      parent_id?: string | null;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      usage?: components['schemas']['ChatUsage'] | null;
      /** Attachments */
      attachments?: components['schemas']['AttachmentRead'][];
      /** Error Code */
      error_code?: string | null;
      /** Error Message */
      error_message?: string | null;
      /** Extra Data */
      extra_data: {
        [key: string]: unknown;
      };
    };
    /**
     * MessageRole
     * @description Message role types
     * @enum {string}
     */
    MessageRole: 'system' | 'user' | 'assistant';
    /**
     * MessageStatus
     * @description Message processing status
     * @enum {string}
     */
    MessageStatus: 'pending' | 'processing' | 'completed' | 'failed';
    /**
     * MessageUpdate
     * @description Schema for updating a message
     */
    MessageUpdate: {
      /** Content */
      content?: string | null;
      status?: components['schemas']['MessageStatus'] | null;
      /** Extra Data */
      extra_data?: {
        [key: string]: unknown;
      } | null;
    };
    /**
     * MessageUsage
     * @description Schema for message usage metrics
     */
    MessageUsage: {
      /**
       * Input Tokens
       * @default 0
       */
      input_tokens: number;
      /**
       * Output Tokens
       * @default 0
       */
      output_tokens: number;
      /**
       * Input Cost
       * @default 0
       */
      input_cost: number;
      /**
       * Output Cost
       * @default 0
       */
      output_cost: number;
    };
    /**
     * ModelCreate
     * @description Schema for creating a new model.
     */
    ModelCreate: {
      /** Name */
      name: string;
      /**
       * Is Active
       * @default true
       */
      is_active: boolean;
      /**
       * Default Max Tokens
       * @default 4096
       */
      default_max_tokens: number;
      /**
       * Default Temperature
       * @default 0.7
       */
      default_temperature: number;
      /**
       * Default Top P
       * @default 0.9
       */
      default_top_p: number;
      /**
       * Provider Id
       * Format: uuid
       */
      provider_id: string;
    };
    /**
     * ModelRead
     * @description Schema for reading a model
     */
    ModelRead: {
      /** Name */
      name: string;
      /**
       * Is Active
       * @default true
       */
      is_active: boolean;
      /**
       * Default Max Tokens
       * @default 4096
       */
      default_max_tokens: number;
      /**
       * Default Temperature
       * @default 0.7
       */
      default_temperature: number;
      /**
       * Default Top P
       * @default 0.9
       */
      default_top_p: number;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Provider Id
       * Format: uuid
       */
      provider_id: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
    };
    /**
     * ModelUpdate
     * @description Schema for updating a model.
     */
    ModelUpdate: {
      /** Name */
      name?: string | null;
      /** Is Active */
      is_active?: boolean | null;
      /** Default Max Tokens */
      default_max_tokens?: number | null;
      /** Default Temperature */
      default_temperature?: number | null;
      /** Default Top P */
      default_top_p?: number | null;
    };
    /**
     * ModelsByProvider
     * @description Schema for reading models grouped by provider.
     *     Args:
     *         RootModel (dict[str, list[ModelRead]]): Root model for models grouped by provider
     */
    ModelsByProvider: {
      [key: string]: components['schemas']['ModelRead'][];
    };
    /**
     * ProviderCreate
     * @description Schema for creating a new provider.
     */
    ProviderCreate: {
      /** Name */
      name: string;
      type: components['schemas']['ProviderType'];
      /**
       * Is Active
       * @default true
       */
      is_active: boolean;
      /** Base Url */
      base_url?: string | null;
      /** Api Key */
      api_key?: string | null;
    };
    /**
     * ProviderRead
     * @description Schema for reading a provider.
     */
    ProviderRead: {
      /** Name */
      name: string;
      type: components['schemas']['ProviderType'];
      /**
       * Is Active
       * @default true
       */
      is_active: boolean;
      /** Base Url */
      base_url?: string | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Api Key */
      api_key?: string | null;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
    };
    /**
     * ProviderType
     * @description Supported LLM provider types based on pydantic_ai documentation.
     *
     *     This enum defines the provider types that users can select from when
     *     configuring their LLM providers in the UI.
     * @enum {string}
     */
    ProviderType: 'openai' | 'anthropic' | 'gemini' | 'groq' | 'mistral' | 'cohere' | 'bedrock';
    /**
     * ProviderUpdate
     * @description Schema for updating a provider.
     */
    ProviderUpdate: {
      /** Name */
      name?: string | null;
      type?: components['schemas']['ProviderType'] | null;
      /** Is Active */
      is_active?: boolean | null;
      /** Api Key */
      api_key?: string | null;
      /** Base Url */
      base_url?: string | null;
    };
    /**
     * ServerStatus
     * @description Enum representing possible server operational statuses
     * @enum {string}
     */
    ServerStatus: 'running' | 'stopped' | 'disabled' | 'error' | 'unknown';
    /**
     * ServerType
     * @description Supported MCP server types.
     * @enum {string}
     */
    ServerType: 'stdio' | 'streamable_http';
    /**
     * SessionCreate
     * @description Schema for creating a new chat session
     */
    SessionCreate: {
      /** Title */
      title: string;
      /** System Context */
      system_context?: string | null;
      /**
       * Provider Id
       * Format: uuid
       */
      provider_id: string;
      /**
       * Llm Model Id
       * Format: uuid
       */
      llm_model_id: string;
      /** Extra Data */
      extra_data?: {
        [key: string]: unknown;
      };
    };
    /**
     * SessionRead
     * @description Schema for reading a chat session
     */
    SessionRead: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Title */
      title: string;
      status: components['schemas']['SessionStatus'];
      /** System Context */
      system_context: string | null;
      /**
       * Provider Id
       * Format: uuid
       */
      provider_id: string;
      /**
       * Llm Model Id
       * Format: uuid
       */
      llm_model_id: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
      /** Last Message At */
      last_message_at: string | null;
      usage?: components['schemas']['ChatUsage'] | null;
      /** Extra Data */
      extra_data: {
        [key: string]: unknown;
      };
    };
    /**
     * SessionStatus
     * @description Chat session status
     * @enum {string}
     */
    SessionStatus: 'active' | 'archived' | 'deleted';
    /**
     * SessionUpdate
     * @description Schema for updating a chat session
     */
    SessionUpdate: {
      /** Title */
      title?: string | null;
      status?: components['schemas']['SessionStatus'] | null;
      /** System Context */
      system_context?: string | null;
      /** Provider Id */
      provider_id?: string | null;
      /** Llm Model Id */
      llm_model_id?: string | null;
      /** Extra Data */
      extra_data?: {
        [key: string]: unknown;
      } | null;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  stream_completion_api_v1_ai_complete__session_id___message_id__stream_get: {
    parameters: {
      query?: {
        max_tokens?: number;
        temperature?: number;
        top_p?: number;
      };
      header?: never;
      path: {
        session_id: string;
        message_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Session, message or model not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponseModel'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Rate limit exceeded */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponseModel'];
        };
      };
      /** @description AI service unavailable */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponseModel'];
        };
      };
    };
  };
  stop_completion_api_v1_ai_complete__session_id__stop_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        session_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Session not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponseModel'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  list_chat_sessions_api_v1_sessions__get: {
    parameters: {
      query?: {
        offset?: number;
        limit?: number;
        title?: string | null;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['SessionRead'][];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  create_chat_session_api_v1_sessions__post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SessionCreate'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['SessionRead'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_chat_session_api_v1_sessions__session_id___get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        session_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['SessionRead'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  delete_chat_session_api_v1_sessions__session_id___delete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        session_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  update_chat_session_api_v1_sessions__session_id___patch: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        session_id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SessionUpdate'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['SessionRead'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  list_session_messages_api_v1_messages__session_id___get: {
    parameters: {
      query?: {
        offset?: number;
        limit?: number;
      };
      header?: never;
      path: {
        session_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['MessageRead'][];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  create_message_api_v1_messages__session_id___post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        session_id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['MessageCreate'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['MessageRead'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_message_api_v1_messages__session_id___message_id___get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        session_id: string;
        message_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['MessageRead'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  delete_message_api_v1_messages__session_id___message_id___delete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        message_id: string;
        session_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  update_message_api_v1_messages__session_id___message_id___patch: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        message_id: string;
        session_id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['MessageUpdate'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['MessageRead'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  bulk_delete_messages_api_v1_messages_bulk__delete: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': string[];
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  upload_attachment_api_v1_attachments__folder___post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        folder: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['Body_upload_attachment_api_v1_attachments__folder___post'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AttachmentRead'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  serve_attachment_api_v1_attachments__folder___filename___get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        folder: string;
        filename: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  list_providers_api_v1_providers__get: {
    parameters: {
      query?: {
        is_active?: boolean | null;
        provider_name?: string | null;
        offset?: number;
        limit?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successfully retrieved list of providers */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ProviderRead'][];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  create_provider_api_v1_providers__post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ProviderCreate'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ProviderRead'];
        };
      };
      /** @description Provider already exists */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponseModel'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_provider_api_v1_providers__provider_id___get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        provider_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ProviderRead'];
        };
      };
      /** @description Provider not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponseModel'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  delete_provider_api_v1_providers__provider_id___delete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        provider_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Provider not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponseModel'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  update_provider_api_v1_providers__provider_id___patch: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        provider_id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ProviderUpdate'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ProviderRead'];
        };
      };
      /** @description Provider not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponseModel'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  list_models_api_v1_models__get: {
    parameters: {
      query?: {
        provider_id?: string | null;
        is_active?: boolean | null;
        model_name?: string | null;
        offset?: number;
        limit?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successfully retrieved list of models */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ModelRead'][];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  create_model_api_v1_models__post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ModelCreate'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ModelRead'];
        };
      };
      /** @description Provider not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponseModel'];
        };
      };
      /** @description Model already exists */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponseModel'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  list_models_by_provider_api_v1_models_all__get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ModelsByProvider'];
        };
      };
    };
  };
  get_model_api_v1_models__llm_model_id___get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        llm_model_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ModelRead'];
        };
      };
      /** @description Model not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponseModel'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  delete_model_api_v1_models__llm_model_id___delete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        llm_model_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Model not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponseModel'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  update_model_api_v1_models__llm_model_id___patch: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        llm_model_id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ModelUpdate'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ModelRead'];
        };
      };
      /** @description Model not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponseModel'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  list_mcp_servers_api_v1_mcp__get: {
    parameters: {
      query?: {
        offset?: number;
        limit?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['MCPServerResponse'][];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  create_mcp_server_api_v1_mcp__post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['MCPServerCreate'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['MCPServerResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  update_mcp_server_api_v1_mcp__server_id__put: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        server_id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['MCPServerUpdate'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['MCPServerResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  delete_mcp_server_api_v1_mcp__server_id__delete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        server_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
}
